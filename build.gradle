plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'

	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'maven-publish'
	id 'org.springframework.boot.experimental.thin-launcher' version "1.0.31.RELEASE"
}

group = 'com.where'
version = '0.0.1-SNAPSHOT'

def profiles = 'local'
if (project.hasProperty('profile')) {
	profiles = project.property('profile')
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	// 5. QueryDSL과 관련된 라이브러리들이 컴파일 시점에만 필요하도록 설정합니다. 또한, QueryDSL 설정을 컴파일 클래스패스에 추가합니다.
	querydsl.extendsFrom compileClasspath
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://repo.spring.io/milestone' }
}


ext {
	set('queryDslVersion', "5.0.0")
//	springCloudVersion = "2023.0.3"
}



publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}

shadowJar.mustRunAfter thinJar


import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
	archiveClassifier = 'aws'
	archiveVersion = ''
	manifest {
		inheritFrom(project.tasks.thinJar.manifest)
		attributes 'Main-Class': 'com.where.server.StreamLambdaHandler'
	}
	mergeServiceFiles()
//	 Required for Spring
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	append 'META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports'
	append 'META-INF/spring/org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration.imports'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories']
		mergeStrategy = "append"
	}
}
assemble.dependsOn = [thinJar, shadowJar]

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	if (profiles == 'prod') {
		configurations {
			implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
		}
	}
//	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'

//	implementation 'org.springframework.boot:spring-boot-starter-amqp'

//	testImplementation 'org.springframework.amqp:spring-rabbit-test'
//	testImplementation 'io.projectreactor:reactor-test'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'com.h2database:h2'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.hibernate.orm:hibernate-spatial:6.2.7.Final'

	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
	implementation 'net.minidev:json-smart:2.5.0'

	implementation 'com.google.firebase:firebase-admin:9.3.0'

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	testImplementation 'com.squareup.okhttp3:mockwebserver'

	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.3'

//	implementation 'org.springframework.cloud:spring-cloud-function-web'
//	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
	runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
//
	implementation 'software.amazon.awssdk:apigatewaymanagementapi:2.27.21'
}

tasks.register('buildZip', Zip) {
	from compileJava
	from processResources
	into('lib') {
		from(configurations.compileClasspath) {
			exclude 'tomcat-embed-*'
		}
	}
}
buildZip.dependsOn compileTestJava
if (profiles == 'prod') {
	build.dependsOn buildZip
}

//dependencyManagement {
//	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//	}
//}

// 1. Q-Class를 생성할 디렉토리 경로를 설정합니다.
def queryDslSrcDir = 'src/main/generated/querydsl/'

// 2. JavaCompile Task를 수행하는 경우 생성될 소스코드의 출력 디렉토리를 queryDslSrcDir로 설정합니다.
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(queryDslSrcDir))
}

// 3. 소스 코드로 인식할 디렉토리에 경로에 Q-Class 파일을 추가합니다. 이렇게 하면 Q-Class가 일반 Java 클래스처럼 취급되어 컴파일과 실행 시 클래스패스에 포함됩니다.
sourceSets {
	main.java.srcDirs += [queryDslSrcDir]
}

// 4. clean Task를 수행하는 경우 지정한 디렉토리를 삭제하도록 설정합니다. : 자동 생성된 Q-Class를 제거합니다.
clean {
	delete file(queryDslSrcDir)
}


tasks.named('test') {
	useJUnitPlatform()
}


