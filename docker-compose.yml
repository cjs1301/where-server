version: "3.8"

services:
#  traefik:
#    image: traefik
#    command:
#      - --api.insecure=true
#      - --api.dashboard=true
#      - --entryPoints.web.address=:80
#      - --entryPoints.web.forwardedHeaders.insecure
#      - --providers.docker
#      - --providers.docker.swarmMode=true
#      - --providers.docker.exposedByDefault=false
#      - --providers.docker.network=odiya
#      - --log.level=DEBUG
#    ports:
#      - "80:80"
#      - "8080:8080" # Traefik dashboard
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - odiya
#    deploy:
#      mode: replicated
#      replicas: 2
#      update_config:
#        order: start-first
#        delay: 10s
#        failure_action: rollback
#      rollback_config:
#        order: stop-first
#        parallelism: 0
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#      placement:
#        constraints:
#          - node.role == manager


  spring-server:
    container_name: "spring-server"
    image: cjs5241/odiya-server
    ports:
      - "4000:4000"
#    healthcheck:
#      test: "curl --fail --silent spring-server:4000/actuator/health | grep UP || exit 1"
#      interval: 20s
#      timeout: 5s
#      retries: 5
#      start_period: 40s
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: '1g'
          cpus: '1'
      update_config:
        order: start-first
        delay: 5s
        failure_action: rollback
      rollback_config:
        order: stop-first
        parallelism: 0
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - odiya
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=odiya
#      - traefik.http.routers.spring-server.rule=Host(`server.odiya.link`)
#      - traefik.http.routers.spring-server.entrypoints=web
#      - traefik.http.services.spring-server.loadbalancer.server.port=4000
  zookeeper:
    # 사용할 이미지
    image: zookeeper
    restart: always
    # 컨테이너명 설정
    container_name: zookeeper
    # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
    ports:
      - "2181:2181"
    networks:
      - odiya
  kafka:
    # 사용할 이미지
    image: wurstmeister/kafka
    # 컨테이너명 설정
    container_name: kafka
    # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
    ports:
      - "9092:9092"
    # 환경 변수 설정
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      #      KAFKA_CREATE_TOPICS: "test-chat:3:1" # 토픽이름:파티션개수:레플리카
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    # 볼륨 설정
    volumes:
      - /var/run/docker.sock
    # 의존 관계 설정
    depends_on:
      - zookeeper
    networks:
      - odiya
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - odiya

networks:
  odiya:
    external: true
