version: "3.8"

services:

#  traefik:
#    image: traefik
#    command:
#      - --api.insecure=true
#      - --providers.docker
#      - --providers.docker.swarmMode
#      - --providers.docker.exposedByDefault=false
#      - --entryPoints.web.address=:80
#      - --api.dashboard=true
#      - --ping.entryPoint=web
#      - -log.level=DEBUG
#    ports:
#      - "80:80"
#      - "9999:9999" # Traefik dashboard
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - odiya
#    deploy:
#      mode: replicated
#      replicas: 2
#      update_config:
#        order: start-first
#        delay: 10s
#        failure_action: rollback
#      rollback_config:
#        order: stop-first
#        parallelism: 0
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#      placement:
#        constraints:
#          - node.role == manager


  spring-server:
    image: cjs5241/odiya-server
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-l", "localhost:8080/actuator/health" ]
      timeout: 5s
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          memory: '1g'
          cpus: '1'
      update_config:
        order: start-first
        delay: 5s
        failure_action: rollback
      rollback_config:
        order: stop-first
        parallelism: 0
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    networks:
      - odiya
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.spring-server.rule=Host(`server.odiya.link`)"
#      - "traefik.http.routers.spring-server.entrypoints=web"
#      - "traefik.http.services.spring-server.loadbalancer.server.port=8081"

networks:
  odiya:
    external: true
