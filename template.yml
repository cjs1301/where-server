AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Where Application

Globals:
  Function:
    Timeout: 20

Resources:
  WhereFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      MemorySize: 1024
      Environment:
        Variables:
          DB_PASSWORD: '{{resolve:ssm:/where/db-password:1}}'
          DB_URL: '{{resolve:ssm:/where/db-url:1}}'
          DB_USERNAME: '{{resolve:ssm:/where/db-username:1}}'
          JWT_EXPIRED: 604800000
          JWT_SECRET: '{{resolve:ssm:/where/jwt-secret:1}}'
          SPRING_PROFILES_ACTIVE: prod
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
    Metadata:
      Dockerfile: Lambda.Dockerfile
      DockerContext: .
      DockerTag: v1
  WarmupRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(5 minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt WhereFunction.Arn
          Id: "WarmupLambdaTarget"
          Input: '{"resource": "/warmup", "path": "/warmup", "httpMethod": "GET"}'
  WarmupLambdaPermission:
     Type: AWS::Lambda::Permission
     Properties:
      FunctionName: !Ref WhereFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt WarmupRule.Arn

  WhereWebsocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      MemorySize: 1024
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: webSocketLambdaHandler
          DB_PASSWORD: '{{resolve:ssm:/where/db-password:1}}'
          DB_URL: '{{resolve:ssm:/where/db-url:1}}'
          DB_USERNAME: '{{resolve:ssm:/where/db-username:1}}'
          SPRING_PROFILES_ACTIVE: prod
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:pt76s4l1ag/prod/POST/@connections/*'
    Metadata:
      Dockerfile: Websocket.Dockerfile
      DockerContext: .
      DockerTag: v1



Outputs:
  WhereApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
