name: Push to Docker Hub

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: odiya_server            # set this to your Amazon ECR repository name
  ECS_SERVICE: server-service                  # set this to your Amazon ECS service name
  ECS_CLUSTER: odiya-server                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/odiya-server-task.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: odiya-server            # set this to the name of the container in the
  # containerDefinitions section of your task definition
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  CI:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Jasypt 키 주입
        run: |
          echo ${{secrets.JASYPT}} >> ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -Pprofile=prod

      - name: Run Tests
        run: ./gradlew :test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: build/libs
          overwrite: true

  CD:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: CI

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download app
        uses: actions/download-artifact@v4
        with:
          name: app
          path: build/libs

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push
        id: build-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          context: .
          platforms: linux/arm64
          push: true # 이미지를 푸쉬합니다.
          tags: ${{ env.ECR_REGISTRY }}/odiya_server:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/odiya_server:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

