#name: Deploy to Amazon ECS
#
##on:
##  push:
##    branches: [ "main" ]
#
#env:
#  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
#  ECR_REPOSITORY:             # set this to your Amazon ECR repository name
#  ECS_SERVICE:                   # set this to your Amazon ECS service name
#  ECS_CLUSTER:                   # set this to your Amazon ECS cluster name
#  ECS_TASK_DEFINITION: .aws/ # set this to the path to your Amazon ECS task definition
#  # file, e.g. .aws/task-definition.json
#  CONTAINER_NAME: server            # set this to the name of the container in the
#  # containerDefinitions section of your task definition
#  IMAGE_TAG: ${{ github.sha }}
#
#permissions:
#  contents: read
#
#jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew clean build
#
#      - name: Run Tests
#        run: ./gradlew :test
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: app
#          path: build/libs
#          overwrite: true
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    needs: test
#    environment: production
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew clean build
#
#      - name: Download app
#        uses: actions/download-artifact@v4
#        with:
#          name: app
#          path: build/libs
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          install: true
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      # docker Build 및 Push를 합니다.
#      - name: Build and push
#        id: build-image
#        uses: docker/build-push-action@v5
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        with:
#          context: .
#          platforms: linux/arm64
#          push: true # 이미지를 푸쉬합니다.
#          tags: ${{ env.ECR_REGISTRY }}/server:latest
#          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
#          cache-to: type=gha,mode=max
#
#      #      - name: Build, tag, and push image to Amazon ECR
#      #        id: build-image
#      #        env:
#      #          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#      #          IMAGE_TAG: ${{ github.sha }}
#      #        run: |
#      #          # Build a docker container and
#      #          # push it to ECR so that it can
#      #          # be deployed to ECS.
#      #          docker buildx build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#      #          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#      #          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.login-ecr.outputs.registry }}/server:latest
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
